#!/usr/bin/env python
import argparse
import errno
import os
import shutil
import tempfile
from os.path import *


class DryRunOs(object):

    def makedirs(self, *args, **kwargs):
        pass

    def unlink(self, *args, **kwargs):
        pass

    def symlink(self, *args, **kwargs):
        pass


def symlink_sync(src_root, dest_root, dry_run=False, **kwargs):
    marked_dirs = set()
    src_root = expandvars(expanduser(src_root))
    dest_root = expandvars(expanduser(dest_root))

    # subfunctions
    def is_marked(dir):
        return dir in marked_dirs

    def dest_path(src_path):
        dest_leaf = relpath(abspath(src_path), start=abspath(src_root))
        dest_path = join(dest_root, dest_leaf)
        return dest_path

    def _symlink_sync(src_path):
        switch_symlinks(
            abspath(src_path), abspath(dest_path(src_path)), dry_run, **kwargs)
    ######################################################################

    print ''
    print 'Getting the plan...'
    for root, dirs, files in os.walk(src_root):
        files = list(files)
        dirs = list(dirs)

        root = abspath(root)
        for filename in files:
            if not filename.startswith('.symlink-'):
                continue

            if filename.endswith('-dir'):
                print '[SYNC-DIR] Synchronizing directory {}.'.format(root)
                dirs[:] = []
                _symlink_sync(root)
                continue

            elif filename.endswith('-files'):
                print '[SYNC-FILES] Synchronizing all files under {} (recursive).'.format(root)
                marked_dirs.add(root)

            elif filename.startswith('.symlink-file-'): 
                individual_file = os.path.join(root, filename.replace('.symlink-file-', '', 1))
                if exists(individual_file):
                    _symlink_sync(individual_file)

        if root in marked_dirs:
            marked_dirs.update(set([join(root, dir) for dir in dirs]))
            for file in files:
                if not file.startswith('.'):
                    _symlink_sync(join(root, file))


def switch_symlinks(src_path, dest_path, dry_run=False, force=False):
    '''
    Creates new symlinks and switch them. If dest_path exists but is not a
    symlink, skip.
    '''
    os_module = DryRunOs() if dry_run else os

    src_path = abspath(realpath(src_path))
    dest_path = abspath(dest_path)
    print 'Linking ({} -> {})...'.format(dest_path, src_path)
    made_dir = None
    bak = None

    def bak(dest_path):
        return dest_path + '.bak'

    def prep(dest_path):
        try:
            made_dir = dirname(dest_path)
            os.makedirs(made_dir)
        except OSError as e:
            if e.errno != errno.EEXIST:
                raise

        if not exists(dest_path):
            return

        if not islink(dest_path) and not force:
            return

        if abspath(realpath(dest_path)) != src_path:
            print "[WARN] Changing symlink at {} to point to \
                {} from {}".format(dest_path, dest_path, realpath(dest_path))

        os_module.renames(dest_path, bak(dest_path))
        return

    bak_file = bak(dest_path)
    try:
        prep(dest_path)
        os_module.symlink(src_path, dest_path)
        if abspath(realpath(dest_path)) != src_path:
            raise Exception("check failed")
    except OSError as e:
        if e.errno == errno.EEXIST:
            print "[WARN] {} already exists and isn't a symlink.".format(dest_path)
            print "[WARN] Run with -f to overwrite it"
            return
    except:
        if made_dir:
            shutil.rmtree(made_dir)
        if exists(bak_file):
            os_module.renames(bak_file, dest_path)
        raise

    if islink(bak_file):
        os_module.unlink(bak_file)
    elif exists(bak_file):
        shutil.rmtree(bak_file)

parser = argparse.ArgumentParser('sync-symlinks')
parser.add_argument('source', nargs='+')
parser.add_argument('destination')
parser.add_argument('--dry-run', action='store_true')
parser.add_argument('--force', '-f',  action='store_true')
args = parser.parse_args()
for src in args.source:
  if exists(src):
    symlink_sync(
        src, args.destination, dry_run=args.dry_run, force=args.force)
    break
